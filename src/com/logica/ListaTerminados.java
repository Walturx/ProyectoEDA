/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.logica;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Walter
 */
//Hecho por Walter Sebastian Melendez Julca-20231805
public class ListaTerminados extends javax.swing.JFrame {

    //Atributo que contiene la estructura  del arbol binario de expedientes
    private ArbolExpedientes arbol;
    //
    
    public ListaTerminados(ArbolExpedientes arbol) {
        //inicializa los componentes graficos de la interfa<
        initComponents();
        botonPrioridad.add(buttonAlta);
        botonPrioridad.add(buttonBaja);
        //Asigna el arbol rexibido
            this.arbol = arbol;
            //Carga automaticamente los expedientes terminaods
              cargarExpedientesTerminados();
    }
    public void agregarExpediente(Nodo nodo) {
        //  Si el nodo esta vacio no hace nada
    if (nodo == null) return;
    //Determina la prioridad del expediente
    String prioridad = nodo.data.Prioritario ? "Alta" : "Baja";
        //Determina la hora final del tramite (Si no hay, muestra mensaje)

    String horaFinal = (nodo.data.Hora_final != null) ? nodo.data.Hora_final.toString() : "No registrada";
    //Se obtiene el modelo de la tabla para añadir fila
    javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) tablaListaTerminados.getModel();
    //Se añaden las filas con los datos  del expediente
    model.addRow(new Object[]{
        nodo.data.Interesado.DNI,   //DNI del interesado
        nodo.data.IUD,  //Id unico del expediente
        nodo.data.Interesado.Nombres,   //nombre del interesado
        nodo.data.Asunto,   //Asunto del expediente
        prioridad,  //Prioridad del expediente
        horaFinal   //Hora final del tramite
    });
}

    public void mostrarDesdePilaPorPrioridad(boolean prioridadBuscada) {
    DefaultTableModel model = (DefaultTableModel) tablaListaTerminados.getModel();
    model.setRowCount(0); // Limpiar tabla

    // Se obtiene una pila con los expedientes filtrados por prioridad
    Pila pila = arbol.obtenerPorPrioridadEnPila(prioridadBuscada);   // (alta o baja, según el parámetro recibido de prioridad)
    pila.invertir();//Invertimos la pila para que al hacer pop(), los expedientes a mostrar no se muestren al reves 
        
        // Recorremos la pila y mostramos los expedientes en la tabla
        while (!pila.empty()) {
            Expediente e = pila.pop(); // Saca el último expediente insertado
            
            String horaFinal = (e.Hora_final != null) ? e.Hora_final.toString() : "No registrada";
             // Se agrega una fila con los datos del expediente a la tabla
            model.addRow(new Object[]{
                e.Interesado.DNI,
                e.IUD,
                e.Interesado.Nombres,
                e.Asunto,
                prioridadBuscada ? "Alta" : "Baja",
                horaFinal
            });
        }
    }


    //Metodo que limpia y carga los expedientes terminados de la tabla
    public void cargarExpedientesTerminados() {
        //Se obtiene el modelo de la tabla
    DefaultTableModel model = (DefaultTableModel) tablaListaTerminados.getModel();
    model.setRowCount(0); // limpia la tabla
    recorrerInorden(arbol.raiz, model); //Se recorre el arbol inorder para mostrar los expedientes ordenados
}

    //Metodo recursivo que recorre el arbol en inorder
private void recorrerInorden(ObjArbol nodo, DefaultTableModel model) {
    //si el nodo es nulo termina el recursivo
    if (nodo == null) return;
    //Recorrido inorder primero con la parte izquierda del arbol
    recorrerInorden(nodo.izq, model);
    //Se obtiene el expediente almacenado en el nodo actual
    Expediente e = nodo.exp;
    //Se determina la prioridad y hora final
    String prioridad = e.Prioritario ? "Alta" : "Baja";
    String horaFinal = (e.Hora_final != null) ? e.Hora_final.toString() : "No registrada";
    //Se añade una fila a la tabla con los datos del expediente
    model.addRow(new Object[]{
        e.Interesado.DNI, //DNI del interesado
        e.IUD,      // ID único del expediente
        e.Interesado.Nombres, //nombre del interesado
        e.Asunto,   //Asunto del expediente
        prioridad,  //Prioridad del expediente
        horaFinal //Hora final del tramite
    });
//Se recorre la parte derecha del arbol
    recorrerInorden(nodo.der, model);
}

    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        botonPrioridad = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaListaTerminados = new javax.swing.JTable();
        btnCerrar = new javax.swing.JButton();
        buscarBtn = new javax.swing.JButton();
        dniTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        buttonAlta = new javax.swing.JRadioButton();
        buttonBaja = new javax.swing.JRadioButton();
        buttonReset = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Lista de terminados");

        tablaListaTerminados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "DNI", "UID", "Nombre", "Asunto", "Prioridad", "Fecha Final"
            }
        ));
        jScrollPane1.setViewportView(tablaListaTerminados);

        btnCerrar.setText("Cerrar");
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });

        buscarBtn.setText("Buscar");
        buscarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarBtnActionPerformed(evt);
            }
        });

        dniTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dniTxtActionPerformed(evt);
            }
        });

        jLabel2.setText("DNI:");

        buttonAlta.setText("Prioridad Alta");
        buttonAlta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAltaActionPerformed(evt);
            }
        });

        buttonBaja.setText("Prioridad Baja");
        buttonBaja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBajaActionPerformed(evt);
            }
        });

        buttonReset.setText("Reiniciar");
        buttonReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(278, 278, 278)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 692, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buttonAlta)
                                .addGap(26, 26, 26)
                                .addComponent(buttonBaja)
                                .addGap(69, 69, 69)
                                .addComponent(buttonReset)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(dniTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(buscarBtn)
                                .addGap(206, 206, 206)
                                .addComponent(btnCerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(47, 47, 47))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCerrar)
                    .addComponent(buscarBtn)
                    .addComponent(dniTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonAlta)
                    .addComponent(buttonBaja)
                    .addComponent(buttonReset))
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_btnCerrarActionPerformed

    private void dniTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dniTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dniTxtActionPerformed

    private void buscarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarBtnActionPerformed
        // TODO add your handling code here:
        //Se inicia un bloque try-catch para capturar errores al convertir DNI a numerico
            try {
                //Se obtiene y limpia el texto interesado en el campo del DNI
        String dniStr = dniTxt.getText().trim();
        //Si el campo esta vacio muestra el mensaje de "Por favor ingresa DNI"
        if (dniStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor ingresa un DNI.");
            return;
        }
        //Convierte el DNI ingresado a entero
        int dni = Integer.parseInt(dniStr);
      
        Expediente e = arbol.buscarPorDNI(dni); // buscar expediente por DNI
        
        
        
        //Si se encontro un expediente con el DNI buscado

    // Mostrar datos si se encontró
        if (e != null) {
    String mensaje = arbol.mostrarDatos(e); 
    
    JOptionPane.showMessageDialog(this, mensaje, "Expediente Encontrado", JOptionPane.INFORMATION_MESSAGE);
} else {
    JOptionPane.showMessageDialog(this, "No se encontró ningún expediente con ese DNI.");
}

    } catch (NumberFormatException ex) {
        //Captura el error si no se coloca el dni en forma numerica
        JOptionPane.showMessageDialog(this, "DNI inválido. Debe contener solo números.");
    }


    }//GEN-LAST:event_buscarBtnActionPerformed

    private void buttonBajaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBajaActionPerformed
        // TODO add your handling code here:
         mostrarDesdePilaPorPrioridad(false); 
    }//GEN-LAST:event_buttonBajaActionPerformed

    private void buttonAltaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAltaActionPerformed
        // TODO add your handling code here:
         mostrarDesdePilaPorPrioridad(true); 
    }//GEN-LAST:event_buttonAltaActionPerformed

    private void buttonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonResetActionPerformed
        // TODO add your handling code here:
         cargarExpedientesTerminados(); // Vuelve a mostrar todos los expedientes
         dniTxt.setText(""); // Limpia el campo de DNI si había algo escrito
          botonPrioridad.clearSelection(); // Deselecciona las opciones de prioridad
    }//GEN-LAST:event_buttonResetActionPerformed

    /**
     * @param args the command line arguments
     */
   public static void main(String args[]) {
    java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
          
            ArbolExpedientes arbol = new ArbolExpedientes(null); 
            new ListaTerminados(arbol).setVisible(true); // 
        }
    });
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup botonPrioridad;
    private javax.swing.JButton btnCerrar;
    private javax.swing.JButton buscarBtn;
    private javax.swing.JRadioButton buttonAlta;
    private javax.swing.JRadioButton buttonBaja;
    private javax.swing.JButton buttonReset;
    private javax.swing.JTextField dniTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaListaTerminados;
    // End of variables declaration//GEN-END:variables
}
